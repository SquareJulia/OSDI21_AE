//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31057947
// Cuda compilation tools, release 11.6, V11.6.124
// Based on NVVM 7.0.1
//

.version 7.6
.target sm_70
.address_size 64

	// .globl	_Z2mmPPKfPPf
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.global .align 1 .b8 $str[14] = {73, 110, 32, 99, 117, 98, 105, 110, 32, 109, 109, 33, 10, 0};
.global .align 1 .b8 $str$1[34] = {112, 66, 67, 58, 37, 112, 44, 32, 42, 112, 66, 67, 58, 37, 112, 44, 32, 112, 65, 67, 58, 37, 112, 44, 32, 42, 112, 65, 67, 58, 37, 112, 10, 0};

.visible .entry _Z2mmPPKfPPf(
	.param .u64 _Z2mmPPKfPPf_param_0,
	.param .u64 _Z2mmPPKfPPf_param_1
)
{
	.local .align 16 .b8 	__local_depot0[32];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<6>;
	.reg .f32 	%f<27>;
	.reg .b32 	%r<20>;
	.reg .b64 	%rd<39>;


	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd4, [_Z2mmPPKfPPf_param_0];
	ld.param.u64 	%rd5, [_Z2mmPPKfPPf_param_1];
	cvta.to.global.u64 	%rd1, %rd5;
	cvta.to.global.u64 	%rd2, %rd4;
	mov.u32 	%r1, %ctaid.y;
	mov.u32 	%r2, %ctaid.x;
	or.b32  	%r7, %r2, %r1;
	mov.u32 	%r3, %tid.x;
	or.b32  	%r8, %r7, %r3;
	setp.ne.s32 	%p1, %r8, 0;
	@%p1 bra 	$L__BB0_2;

	mov.u64 	%rd6, $str;
	cvta.global.u64 	%rd7, %rd6;
	mov.u64 	%rd8, 0;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd7;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd8;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r9, [retval0+0];
	} // callseq 0
	ld.global.u64 	%rd9, [%rd2];
	add.u64 	%rd10, %SP, 0;
	add.u64 	%rd11, %SPL, 0;
	ld.global.u64 	%rd12, [%rd1];
	st.local.v2.u64 	[%rd11], {%rd4, %rd9};
	st.local.v2.u64 	[%rd11+16], {%rd5, %rd12};
	mov.u64 	%rd13, $str$1;
	cvta.global.u64 	%rd14, %rd13;
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd14;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd10;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r10, [retval0+0];
	} // callseq 1

$L__BB0_2:
	shl.b32 	%r4, %r1, 3;
	shr.u32 	%r5, %r3, 3;
	and.b32  	%r6, %r3, 7;
	setp.eq.s32 	%p2, %r2, 0;
	@%p2 bra 	$L__BB0_7;

	setp.ne.s32 	%p3, %r2, 1;
	@%p3 bra 	$L__BB0_10;

	setp.ne.s32 	%p4, %r5, 0;
	mov.f32 	%f21, 0f00000000;
	mov.f32 	%f22, %f21;
	mov.f32 	%f23, %f21;
	@%p4 bra 	$L__BB0_6;

	// begin inline asm
	//B1G0;START
	// end inline asm
	add.s32 	%r11, %r4, %r6;
	ld.global.u64 	%rd15, [%rd2];
	mul.wide.s32 	%rd16, %r11, 4;
	add.s64 	%rd17, %rd15, %rd16;
	ld.f32 	%f16, [%rd17];
	fma.rn.f32 	%f23, %f16, 0f3A83126F, 0f00000000;
	fma.rn.f32 	%f22, %f16, 0f3C343958, 0f00000000;
	fma.rn.f32 	%f21, %f16, 0f3CAC0831, 0f00000000;
	// begin inline asm
	//END;
	// end inline asm

$L__BB0_6:
	add.s32 	%r12, %r4, %r6;
	add.s32 	%r13, %r12, 48;
	ld.global.u64 	%rd18, [%rd1];
	mul.wide.s32 	%rd19, %r13, 4;
	add.s64 	%rd20, %rd18, %rd19;
	st.f32 	[%rd20], %f23;
	add.s32 	%r14, %r12, 64;
	ld.global.u64 	%rd21, [%rd1];
	mul.wide.s32 	%rd22, %r14, 4;
	add.s64 	%rd23, %rd21, %rd22;
	st.f32 	[%rd23], %f22;
	add.s32 	%r15, %r12, 80;
	ld.global.u64 	%rd24, [%rd1];
	mul.wide.s32 	%rd25, %r15, 4;
	add.s64 	%rd26, %rd24, %rd25;
	st.f32 	[%rd26], %f21;
	bra.uni 	$L__BB0_10;

$L__BB0_7:
	setp.ne.s32 	%p5, %r5, 0;
	add.s32 	%r16, %r4, %r6;
	cvt.s64.s32 	%rd3, %r16;
	mov.f32 	%f24, 0f00000000;
	mov.f32 	%f25, %f24;
	mov.f32 	%f26, %f24;
	@%p5 bra 	$L__BB0_9;

	// begin inline asm
	//B0G0;START
	// end inline asm
	ld.global.u64 	%rd27, [%rd2];
	shl.b64 	%rd28, %rd3, 2;
	add.s64 	%rd29, %rd27, %rd28;
	ld.f32 	%f20, [%rd29];
	fma.rn.f32 	%f26, %f20, 0f3A83126F, 0f00000000;
	fma.rn.f32 	%f25, %f20, 0f3C343958, 0f00000000;
	fma.rn.f32 	%f24, %f20, 0f3CAC0831, 0f00000000;
	// begin inline asm
	//END;
	// end inline asm

$L__BB0_9:
	ld.global.u64 	%rd30, [%rd1];
	shl.b64 	%rd31, %rd3, 2;
	add.s64 	%rd32, %rd30, %rd31;
	st.f32 	[%rd32], %f26;
	cvt.u32.u64 	%r17, %rd3;
	add.s32 	%r18, %r17, 16;
	ld.global.u64 	%rd33, [%rd1];
	mul.wide.s32 	%rd34, %r18, 4;
	add.s64 	%rd35, %rd33, %rd34;
	st.f32 	[%rd35], %f25;
	add.s32 	%r19, %r17, 32;
	ld.global.u64 	%rd36, [%rd1];
	mul.wide.s32 	%rd37, %r19, 4;
	add.s64 	%rd38, %rd36, %rd37;
	st.f32 	[%rd38], %f24;

$L__BB0_10:
	ret;

}

